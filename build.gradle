plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.ai:spring-ai-azure-openai-spring-boot-starter'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:0.8.1"
    }
}

// Specify main class for regular HTTP server
springBoot {
    mainClass = 'com.example.mcpserver.McpServerApplication'
}

tasks.named('test') {
    useJUnitPlatform()
    
    // Load environment variables from .env file for all tests
    doFirst {
        def envFile = file('.env')
        if (envFile.exists()) {
            println "🎸 Loading .env file for epic tests..."
            envFile.readLines().each { line ->
                if (line && !line.startsWith('#') && line.contains('=')) {
                    def (key, value) = line.split('=', 2)
                    environment key.trim(), value.trim()
                    println "   Set: ${key.trim()}"
                }
            }
        } else {
            println "⚠️  No .env file found - Azure OpenAI integration tests may fail"
            println "   Create .env with AZURE_OPENAI_API_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT_NAME"
        }
    }
    
    // Enhanced test result reporting
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
    }
    
    // Custom test result summary
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = ""
            def total = result.testCount
            def passed = result.successfulTestCount
            def failed = result.failedTestCount
            def skipped = result.skippedTestCount
            
            if (result.resultType == TestResult.ResultType.SUCCESS) {
                output = """
🎸 Epic Test Results - 2112 Style! 🎸
═══════════════════════════════════════
✅ All tests passed successfully!
📊 Total: ${total} | ✅ Passed: ${passed} | ⏭️ Skipped: ${skipped}
⏱️ Time: ${(result.endTime - result.startTime) / 1000}s
🚀 Ready to rock! All systems go!
═══════════════════════════════════════"""
            } else {
                output = """
🎸 Epic Test Results - 2112 Style! 🎸
═══════════════════════════════════════
❌ Some tests failed!
📊 Total: ${total} | ✅ Passed: ${passed} | ❌ Failed: ${failed} | ⏭️ Skipped: ${skipped}
⏱️ Time: ${(result.endTime - result.startTime) / 1000}s
🔧 Check the details above and fix the issues!
═══════════════════════════════════════"""
            }
            
            println output
        }
    }
}

// 🎸 Epic MCP Server Docker Image Configuration - Cloud Native Buildpacks Style! 🎸
bootBuildImage {
    builder = "paketobuildpacks/builder:base"
    runImage = "paketobuildpacks/run:base"
    
    // Enable verbose output
    verboseLogging = true
    
    // Custom image name
    imageName = "epic-mcp-server:latest"
    
    // Environment variables for buildpacks (platform targeting not directly supported in 3.2.0)
    environment = [
        "BP_JVM_VERSION": "17"
    ]
}
